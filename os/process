DEFINITION
    a running program
    (there can be multiple running instances of the same program)
    (example: two processes of the "ls"-programm have different PIDs)
MULTIPROGRAMABLE SYSTEM
    every process runs on the same physical CPU, the processes alternate: each one gets the CPU for ca.
        0,00001 to 0,0001 seconds, then the next one gets it 
PSEUDOPARALLELISM vs. TRUE HARDWARE PARALLELISM
    pseudoparallelism:
        on machines with 1 CPU there's pseudoparallelism (it looks like if multiple processes run at the same time,
        while in reality they alternate very quickly)
    true hardware parallelism:
        on multiprocessorsystems with 2 or more CPUs multiple processes can run at the same time
INTERACTION WITH A PROCESS
    - process waits for input (e.g. command line prompt)
    - signals can be sent to processes
COMPONENTS
    - source code (compiled or not compiled; if there a multiple processes of the same program, the OS can manage it,
        that they can share the same source code)
    - input
    - output
    - state, consists of:
        - values of CPU registers (instruction address register, instruction register, status register, etc.)
        - values of the variables
    - virtual CPU (every process thinks he got the CPU on its own while in fact the processes alternate on the 
        same physical CPU)
INFORMATION THE OS PROVIDES ABOUT A PROCESSES
    COMMANDS
        LIST OF RUNNING PROCESSES
            - on UNIX you get infos with the program "ps"
            - on Windows with the the program "Task Manager"
    AVAILABLE INFOS
        - PID       every process has an unique process ID                                  3
        - UID       user ID of the process owner                                            1
        - PPID
        - C
        - SZ
        - RSS
        - PSR
        - STIME
        - TTY       is a place where the running command runs
        - TIME      how much time is used by CPU while running the command
        - CMD       command
        - %CPU
        - %MEM
        - VSZ
        - STAT
        - START
PROCESS CREATION
    - devices on which only one process runs infinitely: they create this process on the start of the system (e.g. microwave)
    - devices where different processes can run: there must be an OS which can start and terminate processes
        - system initialization (on system start the OS usually creates multiple processes)
        - a running process executes a process-creation system call
            (e.g. when the process needs the result of another process)
            system call: creates new process and indicates which program to run in the new process
        - the user starts a new process (via mouse click or command line, etc.)
        - OS starts a periodical batch job (e.g. calculate the inventory costs every night)
FOREGROUND vs. BACKGROUND
    foreground: processes which interact with human users
    background: processes which do not interact with users (they just run)
DAEMONS
    are background processes (no interaction with the human user, e.g.: waiting for emails, printing requests, web page requests)
SYSTEM CALL TO CREATE A NEW PROCESS
    - the new process is called "child", the calling process is called "parent"
    UNIX
        only one system call to create a new process: "fork"
            1. "fork" creates an exact clone of the calling process with exact same:
                - memory image
                - environment strings
                - open files
            2. the child usually executes the
                system call "execve" (or a similar system call); before "execve" the child changes its memory image (most
                important the file descriptors) and with "execve" it executes a new program 
    Windows
        the Win32 function call "CreateProcess"
            1. creates a process and
            2. loads a new program into the new process
    
