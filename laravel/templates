- laravel does not use Twig as templating engine (most other Symfony based frameworks do)
- blade tags are called "directives" and are prefixed with an @
- you should not but you can use plain PHP in blade templates (using it is a sign for having logic which
	should not be contained in a view)

{{ $variable }}			<?php echo htmlentities($variable); ?>
{!! $variable !!}		<?php echo $variable; ?>
@{{ $variable }}		<?php echo '{{ $variable }}'; ?>

FILE STRUCTURE
	-+views
	--+layouts
	----footer.blade.php
	----master.blade.php		or: main.blade.php, layout.blade.php
	----nav.blade.php
	--+tasks
	----index.blade.php
	----show.blade.php
CONDITIONALS
	IF
		@if ($condition)			<?php if ($condition): ?>
		@elseif ($condition)			<?php elseif ($condition): ?>
		@else					<?php else ($condition): ?>
		@endif					<?php endif; ?>
        UNLESS
		@unless	($condition)			<?php if (! $condition): ?>
		@endunless				<?php endif; ?>
        OR
		{{ $name or 'John' }}			<?php echo isset($name) ? htmlentities($name) : 'John'; ?>
	ISSET
		@isset($records)			<?php if (isset($records)): ?>
		@endisset				<?php endif; ?>
	EMPTY
		@empty($records)			<?php if (empty($records)): ?>
		@endempty				<?php endif; ?>
	SWITCH
		@switch($i)				<?php switch ($i): ?>
			@case(1)			<?php case 1: ?>
				@break			<?php break;?>
			@case(2)			<?php case 2: ?>
				@break			<?php break;?>
			@default			<?php default;?>
		@endswitch				<?php endswitch;?>
LOOPS
	FOR
		@for ($i = 0; $i < 10; $i++)
		    The current value is {{ $i }}
		@endfor
	FOREACH
		@foreach ($users as $user)
		    <p>This is user {{ $user->id }}</p>
		@endforeach
	CONTINUE - skips current iteration
		@foreach ($users as $user)
		    @continue($user->type == 1)
		    <li>{{ $user->name }}</li>
		@endforeach
	BREAK - ends the loop
		@foreach ($users as $user)
		    <li>{{ $user->name }}</li>
		    @break($user->number == 5)
		@endforeach
	FORELSE - is a @foreach that also allows you to program in a fallback if the object you’re iterating over is empty.
		@forelse ($users as $user)
		    <li>{{ $user->name }}</li>
		@empty
		    <p>No users</p>
		@endforelse
	WHILE
		@while (true)
		    <p>I'm looping forever.</p>
		@endwhile
	LARAVELS LOOP OBJECT
		- not available in PHP foreach loops
		- within a @foreach or @forelse loop, this variable will return a stdClass object
		- properties:
		$loop->index		The index of the current loop iteration (starts at 0).
		$loop->iteration	The current loop iteration (starts at 1).
		$loop->remaining	The iteration remaining in the loop.
		$loop->count		The total number of items in the array being iterated.
		$loop->first		Whether this is the first iteration through the loop (boolean).
		$loop->last		Whether this is the last iteration through the loop (boolean).
		$loop->depth		The nesting level of the current loop (1  for a loop, 2  for a loop within a loop, etc.).
		$loop->parent		When in a nested loop, the parent's loop variable (as a reference; if this loop isn't within another @foreach it's null).
		- example:
		<ul>
		@foreach ($pages as $page)
			<li>{{ $loop->iteration }}: {{ $page->title }}
				@if ($page->hasChildren())
				<ul>
				@foreach ($page->children() as $child)
					<li>
						{{ $loop->parent->iteration }}.
						{{ $loop->iteration }}:
						{{ $child->title }}
					</li>
				@endforeach
				</ul>
				@endif
			</li>
		@endforeach
		</ul>
SECTIONS
            yield
                - first parameter is a name for the section
                - can be extended later
                - if it is not extended a optional default can provided in a second parameter
                - if extended the child section do not have access to the default value
                @yield('title')
                @yield('title', 'Home Page')
            section
                - first parameter is a name for the section
                - can be extended later
                - if it is not extended a optional default block can provided
                - if extended the child section have access to the default value through @parent
                @section('footerScripts')
                    <script	src="app.js"></script>
                @show
            extending
                - each	file	should	only	extend	one	other	file
                @extends('layouts.master')

                @section('content',	'Welcome	to your	application	dashboard!')

                @section('content')
                    Welcome	to your	application	dashboard!
                @endsection

                @section('footerScripts')
                    @parent
                    <script	src="dashboard.js"></script>
                @endsection
            include
                <!--	resources/views/home.blade.php	-->
                <div	class="content"	data-page-name="{{	$pageName	}}">
                    <p>Here's	why	you	should	sign	up	for	our	app:	<strong>It's	Great.</strong></p>
                    @include('sign-up-button',	['text'	=>	'See	just	how	great	it	is'])
                </div>

                <!--	resources/views/sign-up-button.blade.php	-->
                <a	class="button	button--callout"	data-page-name="{{	$pageName	}}">
                        <i	class="exclamation-icon"></i>	{{	$text	}}
                </a>
            each
                You	can	probably	imagine	some	circumstances	in	which	you’d	need	to	loop	over	an	array	or
                collection	and	 @include 	a	partial	for	each	item.	There’s	a	directive	for	that:	 @each .
                Let’s	say	we	have	a	sidebar	composed	of	modules,	and	we	want	to	include	multiple	modules,
                each	with	a	different	title.	Take	a	look	at	Example	4-11.
                Example	4-11.	Using	view	partials	in	a	loop	with	@each

                <!--	resources/views/sidebar.blade.php	-->
                <div	class="sidebar">
                    @each('partials.module',	$modules,	'module',	'partials.empty-module')
                </div>

                <!--	resources/views/partials/module.blade.php	-->
                <div	class="sidebar-module">
                                <h1>{{	$module->title	}}</h1>
                </div>

                <!--	resources/views/partials/empty-module.blade.php	-->
                <div	class="sidebar-module">
                    No	modules	:(
                </div>

                Consider	that	 @each 	syntax.	The	first	parameter	is	the	name	of	the	view	partial.	The	second	is
                the	array	or	collection	to	iterate	over.	The	third	is	the	variable	name	that	each	item	(in	this
                case,	each	element	in	the	 $modules 	array)	will	be	passed	to	the	view	as.	And	the	optional
                fourth	parameter	is	the	view	to	show	if	the	array	or	collection	is	empty	(or,	optionally,	you
                can	pass	a	string	in	here	that	will	be	used	as	your	template).

    templates
        master
            <!--	resources/views/layouts/master.blade.php	-->
            <html>
                <head>
                    <title>My Site | @yield('title', 'Home Page')</title>
                </head>
                <body>
                    <div class="container">
                        @yield('content')
                    </div>
                    @section('footerScripts')
                        <script	src="app.js"></script>
                    @show
                </body>
            </html>

	PFADE alle folgenden Beispiel sind ident:
		view('tasks/show');
		view('tasks.show'); // more common in Laravel
	view ist eine globale helper function; folgende Aufrufe sind völlig ident vom Resultat her:

		view('about', ['key' => 'value', 'bla' => 'blu']);

		view('about')->with('key', 'value')->with('bla', 'blu');

		$key = 'value';
		$bla = 'blu';
		view('about', compact($key, $bla));

	in about.blade.php ist folgendes wieder ident vom Resultat her:

		Hallo <?php echo $key; ?>

		Hallo <?= $key; ?> 

		Hallo {{ $key }}

		Hallo {!! $key !!}
		########################################################
		<?php foreach ($hudri as $wudri) : ?>
			<li><?= $wudri; ?></li>
		<?php endforeach; ?>

		@foreach ($hudri as $wudri)
			<li>{{ $wudri }}</li>
		@endforeach
		########################################################
		weitere:
			@if
			@endif

			@while
			@endwhile

			etc.
	LAYOUT
		####################################
		resources/views/layout.blade.php:
		<!DOCTYPE html>
			<html>
			<head>
				<title>My App</title>
			</head>
			<body>
				@include('layouts.nav')
				@yield('content')
				@yield('another_content')
			</body>
		</html>
		####################################
		resources/views/posts/index.blade.php:
		@extends('layout')

		@section ('another_content')
			bla
		@endsection

		@section ('another_content')
			<script src="/js/file.js"></script>
		@endsection
		####################################
		resources/views/layouts/nav.blade.php:
		<nav>
			...Menü...
		</nav>
		####################################
