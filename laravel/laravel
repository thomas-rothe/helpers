- all input and more information from every execution of the application (HTTP request, from command-line) gets
  converted into a Request object at a very early stage of the code
- then the Request crosses multiple layers
- then the Request gets to the application itself
- then the application generates a Response object
- the Response passes multiple layers until the answer is sent to the user


entry point is public/index.php; what happens now:
- Composer's autoload
- Laravel's cache gets loaded
- Laravel's bootstrap starts: application container gets created
- registering a few core services (kernel, etc.)
- instance of kernel is created 
    - either (for web requests) an instance of the web kernel
    - or (for console, cron and artisan requests) an instance of the console kernel
- request is created
- request is passed to the kernels handle() method
- kernel processes request throuh middleware (or "layers"; is middleware and layers the same here?)
- kernel handles exceptions
- kernel passes request to the page router
- the kernels method handle() returns a response object which gets returned to user
- page request is terminated

kernel
- determines environment the request is running in:
  - staging
  - local
  - production
  - etc.
- runs all the service providers
- defines the list of middleware that will wrap each request (e.g. core middleware for sessions and CSRF protection)

####################################################################################################
####################################################################################################
####################################################################################################	

3 command-line tools
    artisan
    tinker
    installer
components focused on generating frontend code
    PHP helpers
        pagination
        message bags
    non-PHP
        elixir
        conventions around non-PHP assets

####################################################################################################
####################################################################################################
####################################################################################################	

INSTALLATION
	WITH COMPOSER
		composer create-project laravel/laravel projectname
	WITH LARAVEL INSTALLER
		laravel new projectname
START A LOCAL SERVER FOR DEVELOPMENT AT http://127.0.0.1:8000
	php artisan serve
WICHTIGE KOMMANDOS, DIE MAN STÄNDIG BRAUCHT
	AM ANFANG DES PROJEKTS FÜR ENCRYPTION
		php artisan key:generate
	NACH JEDER CONFIG ÄNDERUNG
		php artisan config:clear
	NACH JEDER DB ÄNDERUNG (UND NATÜRLICH GANZ AM ANFANG)
		php artisan migrate
	NACH JEDER KLASSEN ÄNDERUNG
		composer dump-autoload
DEBUG
	dd('bla'); // global helper function to 'dump' and 'die'
STANDARD-LOGIN ERSTELLEN
	php artisan make:auth
LARAVEL-SHELL
	BOOT THE LARAVEL-SHELL
		php artisan tinker
	CLEAR SCREEN
		Strg+k
ARTISAN
	HILFE
		ÜBERSICHT
			php artisan
		HILFE ZU EINEM EINZELNEN KOMMANDO
			php artisan help make:migration
	mit den verschiedenen make:[bla] Kommandos generiert man Dateien

FETCH FROM DB (query builder; besser ist aber wahrscheinlich immer, dasselbe mit Eloquent Model zu machen)
	folgendes gibt JSON aus (mit Google Chrome JSON-Plugin kann man sich das schön formatiert ansehen)

		Route::get('/', function() {
			$tasks = DB::table('tasks')->get();
			return $tasks;   // oder an view weitergeben:   return view('about', compact('tasks'));
		});

	WHERE
		$tasks = DB::table('tasks')->where('created_at', '>=', ... ???)->get();
		$tasks = DB::table('tasks')->find($id);
	ORDER BY date
		$tasks = DB::table('tasks')->latest()->get();
FAVICON
	1.
	<head>
		...
		<link rel="shortcut icon" href="{{ asset('favicon.ico') }}" />
		...
	</head>
	2.
	put favicon.ico to \public
	[? It might take a bit of time to appear on refresh.]

