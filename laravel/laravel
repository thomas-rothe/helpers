
3 command-line tools
    artisan
    tinker
    installer
components focused on generating frontend code
    PHP helpers
        pagination
        message bags
    non-PHP
        elixir
        conventions around non-PHP assets

####################################################################################################
####################################################################################################
####################################################################################################	

INSTALLATION
	WITH COMPOSER
		composer create-project laravel/laravel projectname
	WITH LARAVEL INSTALLER
		laravel new projectname
START A LOCAL SERVER FOR DEVELOPMENT AT http://127.0.0.1:8000
	php artisan serve
WICHTIGE KOMMANDOS, DIE MAN STÄNDIG BRAUCHT
	AM ANFANG DES PROJEKTS FÜR ENCRYPTION
		php artisan key:generate
	NACH JEDER CONFIG ÄNDERUNG
		php artisan config:clear
	NACH JEDER DB ÄNDERUNG (UND NATÜRLICH GANZ AM ANFANG)
		php artisan migrate
	NACH JEDER KLASSEN ÄNDERUNG
		composer dump-autoload
DEBUG
	dd('bla'); // global helper function to 'dump' and 'die'
STANDARD-LOGIN ERSTELLEN
	php artisan make:auth
LARAVEL-SHELL
	BOOT THE LARAVEL-SHELL
		php artisan tinker
	CLEAR SCREEN
		Strg+k
ARTISAN
	HILFE
		ÜBERSICHT
			php artisan
		HILFE ZU EINEM EINZELNEN KOMMANDO
			php artisan help make:migration
	mit den verschiedenen make:[bla] Kommandos generiert man Dateien
MIGRATIONS
	RUN MIGRATIONS
		php artisan migrate
	eine Migration-Datei in database/migrations mit:
		php artisan make:migration create_tasks_table
	oder wenn man gleich auch eine DB table namens "tasks" erstellen will:
		php artisan make:migration create_tasks_table --create=tasks
	weitere:
		php artisan migrate:reset    // führt einen Rollback nach dem anderen von hinten nach vorne durch und am Ende ist die DB wieder leer wie am Anfang
		php artisan migrate:refresh  // wie migrate:reset, nur macht es dann alle migrations wieder neu von vorn bis zur letzten
	BSPE
		$table->increment('id');
		$table->text('longer_text');
		$table->string('shorter_text');
		$table->boolean('is_completed')->default(false);
		$table->timestamps();
	ALLE
		$table->bigIncrements('id');	Incrementing ID using a "big integer" equivalent.
		$table->bigInteger('votes');	BIGINT equivalent to the table
		$table->binary('data');		BLOB equivalent to the table
		$table->boolean('confirmed');	BOOLEAN equivalent to the table
		$table->char('name', 4);	CHAR equivalent with a length
		$table->date('created_at');	DATE equivalent to the table
		$table->dateTime('created_at');	DATETIME equivalent to the table
		$table->decimal('amount', 5, 2);	DECIMAL equivalent with a precision and scale
		$table->double('column', 15, 8);	DOUBLE equivalent with precision, 15 digits in total and 8 after the decimal point
		$table->enum('choices', array('foo', 'bar'));	ENUM equivalent to the table
		$table->float('amount');	FLOAT equivalent to the table
		$table->increments('id');	Incrementing ID to the table (primary key).
		$table->integer('votes');	INTEGER equivalent to the table
		$table->longText('description');	LONGTEXT equivalent to the table
		$table->mediumInteger('numbers');	MEDIUMINT equivalent to the table
		$table->mediumText('description');	MEDIUMTEXT equivalent to the table
		$table->morphs('taggable');	Adds INTEGER taggable_id and STRING  taggable_type
		$table->nullableTimestamps();	Same as timestamps(), except allows NULLs
		$table->smallInteger('votes');	SMALLINT equivalent to the table
		$table->tinyInteger('numbers');	TINYINT equivalent to the table
		$table->softDeletes();		Adds deleted_at column for soft deletes
		$table->string('email');	VARCHAR equivalent column
		$table->string('name', 100);	VARCHAR equivalent with a length
		$table->text('description');	TEXT equivalent to the table
		$table->time('sunrise');	TIME equivalent to the table
		$table->timestamp('added_on');	TIMESTAMP equivalent to the table
		$table->timestamps();		Adds created_at and updated_at columns
		$table->rememberToken();	Adds remember_token as VARCHAR(100) NULL
		->nullable()			Designate that the column allows NULL values
		->default($value)		Declare a default value for a column
		->unsigned()			Set INTEGER to UNSIGNED

FETCH FROM DB (query builder; besser ist aber wahrscheinlich immer, dasselbe mit Eloquent Model zu machen)
	folgendes gibt JSON aus (mit Google Chrome JSON-Plugin kann man sich das schön formatiert ansehen)

		Route::get('/', function() {
			$tasks = DB::table('tasks')->get();
			return $tasks;   // oder an view weitergeben:   return view('about', compact('tasks'));
		});

	WHERE
		$tasks = DB::table('tasks')->where('created_at', '>=', ... ???)->get();
		$tasks = DB::table('tasks')->find($id);
	ORDER BY date
		$tasks = DB::table('tasks')->latest()->get();
FAVICON
	1.
	<head>
		...
		<link rel="shortcut icon" href="{{ asset('favicon.ico') }}" />
		...
	</head>
	2.
	put favicon.ico to \public
	[? It might take a bit of time to appear on refresh.]
