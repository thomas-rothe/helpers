CONTROLLERS
	neue Klasse in app/Http/Controllers/TasksController.php erstellen:
		php artisan make:controller TasksController
	samt den RESTful-Methoden ("resourceful controller"):
		php artisan make:controller TasksController -r
	BSP
		class TasksController extends Controller
		{
			public function index()
			{
				$tasks = Task:all();
				return view('tasks.index', compact('tasks');
			}
			public function show($id)
			{
				$task = Task::find($id);			// schönes Bsp: Controller delegiert an Model und fragt es nach einer ID
				return view('tasks.show', compact('task'));	// schönes Bsp: Controller delegiert an View und sagt, welche was anzeigen soll
			}
		}
	ROUTE-MODEL-BINDING
		Route::get('/tasks/{task}', 'TasksController@show');	// "task" muss genauso heißen, wie die Parameter-Variable im Controller!!
		class TasksController extends Controller
		{
			public function show(Task $task)		// funktioniert nur mit dem primary key (also meistens der ID)
			{						// intern mach Laravel daraus: $task = Task::find([WILDCARD]);
				return $task;
			}
		}
	STORE()
		public function store()
		{
			// new post object
			$post = new Post;
			// get data from POST request
			$post->title = request('title');
			$post->body = request('body');
				// alternativ zu den zwei obigen letzten Zeilen:
				Post::create([
					'title'	=> request('title'),
					'body'	=> request('body')
				]);
			// save to DB
			$post->save();
			// redirect
			return redirect('/');

			// oder alternativ, am besten so (mit Parent-Klasse):
			Post::create(request(['title', 'body']));
			return redirect('/');
		}
	INDEX()
		public function index()
		{
			$posts = Post::all();
			return view('posts.index', compact('posts'));
		}
		plus eine Datei resources/views/posts/post.blade.php, die man includet mit:
		@foreach ($posts as $post)
			@include ('posts.post')
		@endforeach
		resources/views/posts/post.blade.php:
		<div class="blog-post">
			<h2 class="blog-post-title">{{ $post->title }}</h2>
			<p class="blog-post-meta">{{ $post->created_at }}<a href="{{ ... }}">{{ $post->author }}</a></p>
			{{ $post->body }}
		</div>
	SERVERSEITIGE FORM-VALIDATION
		public function store()
		{
			// validate the request
			$this->validate(request(), [
				// alle zu validierenden Felder des Requests
				'title'	=>'required|min:5',	// "title" muss ausgefüllt sein und mindestens 5 characters haben
				'body'	=>'required|max:500',
			]);
			Post::create(request(['title', 'body']));
			return redirect('/');
			// ACHTUNG die Validation-Fehler werden im HTML des Formulars ausgegeben! SIEHE FORM
		}
