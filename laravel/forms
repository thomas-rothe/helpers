FORM METHOD SPOOFING
	- HTML forms only allow GET and POST verbs (determined by the "method" attribute) but Laravel allows to specify additional verbs for HTML forms
	- often used for PUT and DELETE (also possible are: HEAD, OPTIONS, PATCH and the rarely used: TRACE, CONNECT)
		GET	requests a resource
		HEAD	asks for a headers-only version of GET
		POST 	creates a resource
		PUT 	overwrites a resource
		PATCH 	modifies a resource
		DELETE 	deletes a resource
		OPTIONS	asks the server which verbs are allowed at this URL
	- works by adding a hidden variable named "_method" with a value like "PUT", "PATCH" or "DELETE"; Laravel will
		match and route that form submission as if it was actually a request with that verb
		
	<form action="/tasks/5" method="POST">
		<input type="hidden" name="_method" value="DELETE">
	</form>
CSRF PROTECTION
	- if you try to send a form without a CSRF token Laravel will fail and throw an TokenMismatchException
	- by default, all routes except the "read-only" routes (GET, HEAD, OPTIONS) are protected against CSRF attacks
		by requiring a token, in the form of an input named "_token", to be passed along with each request
	- the token is generated at the start of every session, and every non–read-only route compares the submitted
		"_token" against the session token
	- so you have to add the "_token" input to each of your submissions
			<form action="/tasks/5" method="POST">
				{{ csrf_field() }}
			
				<?php echo csrf_field(); ?>
				
				<input type="hidden" name="_token" value="<?php echo csrf_token(); ?>">
			</form>
	- Laravel will check the X-CSRF-TOKEN on every request, and valid tokens passed there will mark the CSRF
		protection as satisfied
	- in JavaScript applications: store the token on every page in a <meta> tag
		<meta name="csrf-token" content="<?php echo csrf_token(); ?>" id="token">
		
		JQUERY
		$.ajaxSetup({
			headers: {
				'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
			}
		});
		
		VUE
		Vue.http.interceptors.push((request, next) => {
			request.headers['X-CSRF-TOKEN'] = document.querySelector('#token').getAttribute('content');
			next();
		});
VALIDATION
	mit HTML 5 automatisch:
		z.B. darf "title" nicht NULL sein in der DB, dafür HTML 5 keyword "required":
		<input type="text" class="form-control" id="title" name="title" required>
	oder wegen älteren Browsern, die HTML 5 nicht supporten, braucht man stattdessen serverseitige validation:
		SIEHE CONTROLLER
		Ausgabe der Validation-Fehler:
		<form>
			...
			@if (count($errors))
				<div class="form-group">
					<div class="alert alert-danger">
						<ul>
							@foreach ($errors->all() as $error)	// $errors-Variable gibt es immer; wenn keine Fehler ist es leer; man kann es also immer schreiben
								<li>{{ $error }}</li>
							@endforeach
						</ul>
					</div>
				</div>
			@endif
		</form>
		oder übersichtlicher ist es, das in ein partial auszulagern und dieses immer zu includen, wenn nötig:
		<form>
			...
			@include('layouts.errors')
		</form>
		mit einer neuen Datei:
		resources/views/layouts/errors.blade.php:
		@if (count($errors))
			<div class="form-group">
				<div class="alert alert-danger">
					<ul>
						@foreach ($errors->all() as $error)	// $errors-Variable gibt es immer; wenn keine Fehler ist es leer; man kann es also immer schreiben
							<li>{{ $error }}</li>
						@endforeach
					</ul>
				</div>
			</div>
		@endif
