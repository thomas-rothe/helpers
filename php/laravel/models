ELOQUENT
	- Eloquent is Laravel's active record implementation
	- think of each Eloquent model as a powerful query builder allowing you to fluently query the database table associated with the model
	- naming convention:
		- first letter big, singular					Task
		- DB table first letter small, plural				create_tasks_table
		- controller first letter big, plural, append "Controller"	TasksController
		- view first letter small, plural				tasks.index
CREATE MODEL
	php artisan make:model Task
	WITH MIGRATION (m) AND CONTROLLER (c)
		php artisan make:model Post -mc
		= php artisan make:controller PostsController; php artisan make:model Post; php artisan make:migration create_posts_table --create=posts
METHODS
	COLLECTION OF OBJECTS
		ALL
			Task::all()
		GET (FOR SELECTIONS)
			Task::where('id', 2)->get()
		FIND
			Task::find([1, 2, 3]);
		PLUCK (like all but only 'body')
			Task::pluck('body');
	SINGLE OBJECT
		FIND
			Task::find(1)
		FIND OR FAIL
			Task::findOrFail(1)
		FIRST OR FAIL
			Task::firstOrFail(1)
		FIRST (LIMIT 1)
			Task::all()->first()
	AGGREGATES
		Task::where('active', 1)->count();
		Task::where('active', 1)->max('price');
	WHERE
		Task::where('id', 2)->get();
		Task::where('id', '>', 2)
			->orderBy('name', 'desc')
               		->take(10)
			->get();
	CREATE NEW
		$task = Task::create([
			'title' => 'My task',
			'body' => 'Foo bar foo.',
		]);
	FILL (FOR AN EXISTING OBJECT)
		$task->fill([
			'title' => 'My task',
			'body' => 'Foo bar foo.',
		]);
	SAVE
		$task = new Task;
		$task->body = 'fill body column';
		$task->save();
	DELETE
		$flight->delete()
	DESTROY
		Task::destroy([1, 2, 3])
CUSTOM METHODS
	public function isComplete()
	{
		return false;
	}
	
	public static function incomplete()
	{
		return static::where('completed', 0)->get();
	}
	
	public function getComments()
	{
		return $this->hasMany(Comment::class);
	}
	public function addComment($body)
	{
		$this->getComments()->create(compact('body'));
	}
	
	public function user()
	{
		retrun $this->belongsTo(User::class);
	}
	
	public function scopeFilter($query, $filters)
	{
		if ($month = $filters['month']) {
			$query->whereMonth('created_at', Carbon::parse($month)->month);
		}
	}
	
	public static function getArchive()
	{
		return static::selectRaw('year(created_at) year, monthname(created_at) month, count(*) published')
			->groupBy('year', 'month')
			->orderByRaw('min(created_at) desc')
			->get()
			->toArray();
		);
	}
	
	QUERY SCOPE wrapper around a particular query
		public function scopeIncomplete($query)
		{
			return $query->where('completed', 0);
		}
		
		Task::incomplete()->get();
		Task::incomplete()->where('id', '>=', 2)->get();
CUSTOMIZING THE ROUTE KEY FOR AN ELOQUENT MODEL (FOR ROUTE MODEL BINDING)
	- any time an Eloquent model is looked up via a URL segment (usually because of route model binding), the
		default column Eloquent will look it up by is its primary key
	- to change the column your Eloquent model uses for URL lookups, add a method to your model named getRouteKeyName()
	
		public function getRouteKeyName()
		{
		    return	'slug';
		}
	- now, a URL like conferences/{conference} will expect to get the slug instead of the ID, and will perform its
		lookups accordingly
