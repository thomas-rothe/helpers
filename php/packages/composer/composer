composer.lock
	- is written automatically by Composer
	- contains all actually installed packages plus the exact version, e.g.: 2.6.13
composer install
	1. checks if the file "composer.lock" exists
	2.	- if it exists it reads it and installs the dependencies listed there
		- if not it does the same as "composer update"
composer update
	1. checks if the file "composer.json" exists
	2. reads the file and for every package it remembers the latest possible version 
	3. if the file exists it reads "composer.lock" and compares the remembered latest possible version from "composer.json" with the version currently installed
	4. if the remembered version is newer tha the one in "composer.lock" it installs the newer version
	5. creates or updates the file "composer.lock"
	
	--dev
		- braucht man nicht setzen: ist default und installiert auch alle packages unter "require-dev"
		- für die Produktivversion braucht man zB keine Tests und kann die Installation von "require-dev"-packages 
		ausschließen mit: --no-dev (diese Option löscht sogar alle zuvor installierten "require-dev"-packages 
		physisch vom Rechner)
composer require [vendorname/packagename]
	1. creates a composer.json file if it not exists
	2. in composer.json it adds the package to the "require" section (or to "require-dev" section)
	3. if it not exists creates a folder "vendor"
	4. installs the package under "vendor/"
	5. creates or updates composer.lock with the package, its version and its dependencies
Autoloading
	- by default Composer automatically creates a file "vendor/autoload"
	- if you require this file to your code you can autoload all classes of your dependencies
		<?php
		require 'vendor/autoload.php';
		use [namespace\path\to\classname];
		$var = [classname]::[method]([params]);
	- if you want to configure autoloading yourself Composer offers differten methods of autoloading
		files
			when you require "vendor/autoload.php" Composer will load a list of files
			{
				"autoload": {
					"files": [
						"projectroot/path/file.php",
						"projectroot/otherpath/file.php"
					]
				}
			}
		classmap
			- when generating its autoloader code Composer iterates all listed directories and 
			maps every PHP class it can find in the files to the path of the file of the class
			- when you use a previously undefined class Composer will load it from the file
			- big downside: if you add a new file with a new class to any of the pathes you have
			to tell Composer to refresh its classmap with: composer dump-autoload
			{
				"autoload": {
					"classmap": [
						"projectroot/path",
						"projectroot/otherpath"
					]
				}
			}
		psr-0
			if you have a file "src/Me/Some/Namespace/File.php":
				<?php
				namespace Me\Some\Namespace;
				class File { ... }
			then you can load it like that:
			{
				"autoload": {
					"psr-0": {
						"Me\\Some\\Namespace\\File": "src/"
					}
				}
			}
		psr-4
			if you have a file "src/Something/File.php":
				<?php
				namespace Me\Namespace\Something;
				class File { ... }
			then you can load it like that:
			{
				"autoload": {
					"psr-4": {
						"Me\\Namespace\\": "src/"
					}
				}
			}
Lifecycle hooks and scripts
	- Composer allows you to define commands which will be run after a specified event
	- for example after composer "create-project", "composer install", "composer update" etc.
	- e.g.: in Laravel you could run your migrations, clean up assets, etc. after every "composer install", so to get to production you only run "git pull ; composer install"
	
	"scripts": {
		"post-root-package-install": [
			"php -r \"file_exists('.env') || copy('.env.example', '.env');\""
		],
		"post-create-project-cmd": [
			"php artisan key:generate"
		],
		"post-install-cmd": [
			"illuminate\\Foundation\\ComposerScripts::postInstall",
			"php artisan optimize"
		],
		"post-update-cmd": [
			"illuminate\\Foundation\\ComposerScripts::postUpdate",
			"php artisan optimize"
		],
	},
To use your locally developed package create a composer.json:
	{
		"require": {
		    "michaelkaefer/marc": "dev-master"
		},
		"repositories": [
			{
				"type": "vcs",
				"url": "/var/www/html/marc"
			}
		]
	}
