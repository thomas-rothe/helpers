// Heutiges Datum und Datum von heute vor einer Woche
$today = new DateTime();
$lastWeek = new DateTime();
$lastWeek = $lastWeek->sub(new DateInterval('P7D'));
return array(
    'ZIPPED_INVOICES_DOWNLOAD_DATE_FROM' => $lastWeek->format('Y-m-d'),
    'ZIPPED_INVOICES_DOWNLOAD_DATE_TO' => $today->format('Y-m-d')
);
	
	
$d = new DateTime('2011-01-01T15:03:01.012345Z');

$d->format('j')			// '1' 		day, month: from 1 to 31
$d->format('d')			// '03' 	day, month: from 01 to 31
$d->format('S')			// 'st'		day, month: The English ordinal suffix for the day of the month (2 characters st, nd, rd or th. Works well with j)
$d->format('D')			// 'SUN'	day, name: textual representation with three letters
$d->format('l')			// 'Sunday'	day, name: full textual representation of a day
$d->format('N')			// '1'		day, name: The ISO-8601 numeric representation of a day (1 for Monday, 7 for Sunday)
$d->format('w')			// '0'		day, name: A numeric representation of the day (0 for Sunday, 6 for Saturday)
$d->format('z')			// '364'	day, year: from 0 through 365

$d->format('W')			// '17'		The ISO-8601 week number of year (weeks starting on Monday)

$d->format('F')			// 'January'	A full textual representation of a month (January through December)
$d->format('m')			// '01'		A numeric representation of a month (from 01 to 12)
$d->format('M')			// 'JAN'	A short textual representation of a month (three letters)
$d->format('n')			// '1' 		A numeric representation of a month, without leading zeros (1 to 12)
$d->format('t')			// '31'		The number of days in the given month

$d->format('Y')			// '2011'	four digit representation of a year
$d->format('y')			// '11'two digit representation of a year
$d->format('L')			// '0' 		Whether it's a leap year (1 if it is a leap year, 0 otherwise)
$d->format('o')			//  		The ISO-8601 year number

$d->format('a')			//  		Lowercase am or pm
$d->format('A')			//  		Uppercase AM or PM
$d->format('B')			//  		Swatch Internet time (000 to 999)
$d->format('g')			//  		12-hour format of an hour (1 to 12)
$d->format('G')			//  		24-hour format of an hour (0 to 23)
$d->format('h')			//  		12-hour format of an hour (01 to 12)
$d->format('H')			//  		24-hour format of an hour (00 to 23)
$d->format('i')			//  		Minutes with leading zeros (00 to 59)
$d->format('s')			//  		Seconds, with leading zeros (00 to 59)
$d->format('u')			//  		Microseconds (added in PHP 5.2.2)
$d->format('e')			//  		The timezone identifier (Examples: UTC, GMT, Atlantic/Azores)
$d->format('I')			//  		Whether the date is in daylights savings time (1 if Daylight Savings Time, 0 otherwise)
$d->format('O')			//  		Difference to Greenwich time (GMT) in hours (Example: +0100)
$d->format('P')			//  		Difference to Greenwich time (GMT) in hours:minutes (added in PHP 5.1.3)
$d->format('T')			//  		Timezone abbreviations (Examples: EST, MDT)
$d->format('Z')			//  		Timezone offset in seconds. The offset for timezones west of UTC is negative (-43200 to 50400)
$d->format('c')			//  		The ISO-8601 date (e.g. 2013-05-05T16:34:42+00:00)
$d->format('r')			//  		The RFC 2822 formatted date (e.g. Fri, 12 Apr 2013 12:01:05 +0200)
$d->format('U')			//  		The seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)

and the following predefined constants can also be used (available since PHP 5.1.0):
DATE_ATOM - Atom (example: 2013-04-12T15:52:01+00:00)
DATE_COOKIE - HTTP Cookies (example: Friday, 12-Apr-13 15:52:01 UTC)
DATE_ISO8601 - ISO-8601 (example: 2013-04-12T15:52:01+0000)
DATE_RFC822 - RFC 822 (example: Fri, 12 Apr 13 15:52:01 +0000)
DATE_RFC850 - RFC 850 (example: Friday, 12-Apr-13 15:52:01 UTC)
DATE_RFC1036 - RFC 1036 (example: Fri, 12 Apr 13 15:52:01 +0000)
DATE_RFC1123 - RFC 1123 (example: Fri, 12 Apr 2013 15:52:01 +0000)
DATE_RFC2822 - RFC 2822 (Fri, 12 Apr 2013 15:52:01 +0000)
DATE_RFC3339 - Same as DATE_ATOM (since PHP 5.1.3)
DATE_RSS - RSS (Fri, 12 Aug 2013 15:52:01 +0000)
DATE_W3C - World Wide Web Consortium (example: 2013-04-12T15:52:01+00:00)
