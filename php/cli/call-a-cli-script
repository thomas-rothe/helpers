TERMINAL
    PASS A FILE AS AN ARGUMENT TO THE PHP EXECUTABLE
        ~$ php myscript.php       or equivalent:
        ~$ php -f myscript.php    -f is optional
        ~$ php -e myscript.php    the same but executes "myscript.php" in Extended Information Mode
    PASS A STRING AS AN ARGUMENT TO THE PHP EXECUTABLE
        ~$ php -r "echo(\"Hello World!\n\");"
            - many command-line options are not available with the -r method (e.g. syntax highlighting)
            - watch out for shell variable substitution (use single quotes rather than double quotes around your
                code in Bash shells) and other mangling of your code by the shell
            - a common use of the -r option is for executing PHP generated by other (possibly non-PHP) shell 
                commands, where the whole shell script needs to execute in memory without touching the disk 
                (for instance, where permissions prohibit disk write access).
    STDIN
        If you do not specify a file or use the -r option, PHP will treat the contents of STDIN as the PHP code to be
        executed, as shown here (note that echo works like this only on Linux or macOS):
        ~$ echo '<?php echo "hello\n";?>' | php
        You can also use this method with -B, -R, -F, and -E to make PHP a first-class citizen in shell
        scripting, giving you the ability to pipe data in and out of PHP. For instance, to reverse every line of a file (or
        any data source that you pipe into it), on Linux or macOS use the following:
        ~$ cat file.txt | php -R 'echo strrev($argn)."\n";' | grep olleh
        On Windows, use the following:
        > more file.txt | php -R "echo strrev($argn).\"\n\";" | findstr olleh
        In this line of code, you pipe the contents of a text file into PHP. The -R option tells PHP to execute the
        following PHP code on each line of input, where the line is stored in the special variable $argn. In this case,
        you reverse $argn by using the string-reversing function strrev() and then echo the reversed string out
        again. Any echoed output goes to STDOUT, which either is printed to the shell or, as in this case, can be piped
        to another shell command. In this case, you then use grep to display only the lines containing the string
        olleh, which is hello backward. You can find more details on -R and its siblings in the previous section. If
        you want to use options such as -R but have too much PHP code to fit comfortably on the command line,
        you can put the code in a normal PHP source code file and include it with include(). Here’s an example:
        ~$ cat something.txt > php -R 'include("complicated.php");'
        If you have a nontrivial PHP script, it may be more efficient to package it into functions and include it
        once with -B (-B means it’s executed before the main code) and then execute the function each time with
        -R. The following example loads the content of my_functions.php once at the start, and then the function
        complicated() from that file is called on each line (each $argn) from the data file (data.txt):
        ~$ php -B 'include("my_functions.php");' -R 'complicated($argn);' -f 'data.txt'
        Although these commands look relatively simple, there is no arbitrary limit to the PHP code you can put
        behind them. You can use classes and objects, multiple files, and most of the code and techniques explored
        in this book—exposing only functions or methods at the shell level as an interface for the user. You can also
        open the standard streams as PHP streams within PHP and access their file pointers to read data in from,
        negating the need to use -R, as discussed in the next chapter.
    SELF-EXECUTING SCRIPT (DIRECTY EXECUTEABLE SHELL COMMAND FILE)
        UNIX
            make the first line of the script file a #! line (shebang line) with a path to the PHP binary:
                #!/usr/bin/php
                <?php
                echo('Hello World!');
            make it executable:
                ~$ chmod a+x myscript.php
            execute it:
                ~$ ./myscript.php       or you can also rename the file to remove the .php extension and type:
                ~$ ./myscript           or add it to your $PATH and type:
                ~$ myscript
            note that when running a script in this manner, any command-line options are passed directly to the 
                script and not to PHP. In fact, you cannot pass extra command-line
                parameters to PHP at runtime by using this method; you must include them in the shebang line when
                constructing your script. For instance, in the previous example, if you wanted to use Extended Information
                Mode, you would alter the first line of the script to read as follows:
                    #!/usr/bin/php -e
                If you were to instead call the script as follows
                    ~$ myscript -e
                then the -e flag would be passed as an argument to your main script, not to PHP directly, and so PHP would
                not enter EIM. This is useful for scripts that have lots of user-supplied arguments. However, it also makes
                options such as -B and -R (discussed in the previous method) cumbersome to use for processing STDIN data
                because you have to include all the PHP on the shebang line, where it is harder to change. You can simply
                use include() to include the necessary files and use standard file streams to process the STDIN stream
                (created and opened by the CLI SAPI automatically for you) line by line instead.
                If your script may be used on other systems, please bear in mind that the PHP binary will quite often
                be located in a different directory than the one on your system. In this scenario, you need to change the
                shebang line for each system if you hard-code the location in it. Fortunately, if installed correctly, PHP sets
                an environment variable (called php) with its location, available via the /usr/bin/env shell command. So if
                you change the shebang line as follows, your script should be executable wherever PHP is located:
                    #!/usr/bin/env php
                On Windows, the shebang line can be left in because PHP will recognize it as a comment and ignore it.
                However, it will not execute the file as it does on *nix.
        WINDOWS
            In a similar manner, scripts can be executed by calling them directly under Windows. However, the process
            for setting up Windows to do this is slightly more involved. First, you need to add your PHP directory (the
            directory containing php.exe, phpwin.exe, or php-cli.exe) to the Windows search path (specified in the
            environment variable PATH) so that you can call PHP without having to specify the full directory path. To do
            this, follow these steps:
              1.	
            (pre-Windows 10) From the Start menu, go to the Control Panel and select the
            System icon from the System and Security group.
            (Windows 10) From the Start menu, click Settings and search for Environment.
            Then select Edit the System Environment Variables from the drop-down list.
              2.	
            On the Advanced tab, click the Environment Variables button.
              3.	
            In the System Variables pane, find the Path entry (you may need to scroll to find it).
              4.	
            Double-click the Path entry to edit it and add your PHP directory at the end,
            including a semicolon (;) before it (for example, ;C:\php). Make sure that you do
            not overwrite or remove any of the text already in the path box. In Windows 10,
            simply add a new line in the editor.
            You also need to amend (or add) the PATHEXT environment variable in the same way, so find the
            PATHEXT entry in the same window and add .PHP, again using a semicolon to separate it from the rest of the
            entries while taking care not to alter them.
            Next you need to associate the .php file extension with a file type and then tell Windows which program
            to run for files of that type. To do this, run the following two commands at the Windows command prompt,
            which you should run as Administrator. Make sure to change the path/file name in the second command to
            match your installation.
            assoc .php=phpfile
            ftype phpfile="C:\PHP5\php.exe" -f "%1" -- %~2
            These changes allow you to run myscript rather than C:\php\php.exe myscript.php. Note that
            under Windows 10, you will not be able to run scripts in this way at an elevated (Administrator) command
            prompt because the PHP executable is not run as administrator by default. To fix this, right-click the php.
            exe executable, select Properties and Compatibility, and select Run This Program as an Administrator in
            Settings. Apply the change to all users. Scripts should now execute as expected in all command prompts.
WINDOWS ONLY: php-win.exe
    PHP for Windows also ships with php-win.exe, which is similar to the CLI build of PHP, except that it does
    not open a command-line window. This is useful for running system software in the background or running
    scripts that create their own graphical interface.
MOUSE CLICK (VIA CLICKABLE ICONS)
    LINUX
        On most Linux systems, specifically those that support the freedesktop.org Desktop Entry Specification
        standard, you can create a clickable launcher icon by simply creating a text file. Most mainstream Linux
        distributions and their window managers follow at least the basics of this standard. To create a launcher for
        your app, create a text file in the folder where you want it to appear (for example, in /home/rob/Desktop)
        called, for instance, myscript.desktop. It is important that it has the .desktop extension. In the file, add the
        following lines:
        [Desktop Entry]
        Type=Application
        Name=My Funky App
        Terminal=true
        Exec=/usr/bin/php /home/rob/scripts/myscript.php
        Icon=/usr/share/icons/Humanity/emblems/32/emblem-OK.png
        The first two lines tell the system what you are creating here. The Name= line gives your launcher a name,
        which will be shown below the icon. The Terminal= line determines whether a terminal window is opened
        for this program. Set this to true if you are creating a shell script that takes input from, or sends output to,
        the terminal. If your script interacts with the user via GUI elements, you should likely set it to false. Exec=
        specifies the command to execute when the user clicks the icon. This is the command to call your PHP
        script, as we discussed in the previous sections. Finally, the Icon= line points to the location of a pretty icon
        for your app. You can supply your own icon file or use one of the system-provided ones. This example uses
        the Ubuntu smiley-face OK emblem icon, to show the look on your face when you get your first PHP desktop
        app working. You will usually need to also give the .desktop file execute permission by using chmod u+x
        myscript.desktop (or a similar method).
        You can set many other options in this file; see the following standards site for more info. Support for
        some options varies from distribution to distribution.
    WINDOWS
        As mentioned previously, PHP has two executables for Windows: the standard php.exe and the newer php-
        win.exe, which allows windowless running of scripts. There are likewise two ways to make clickable scripts.
        First is the simple Windows batch file. This is a text file with a list of commands to execute. Batch files
        have the .bat extension in their name and are executable by default. So if you have a PHP script called
        display_stats.php that displays a list of numbers and then exits, and you want to run it in Extended
        Information Mode, you can make it a clickable script by creating a file called, say, our_stats.bat with the
        contents:
        "C:\Program Files (x86)\PHP\php.exe" -e "C:\users\Rob\PHP
        Scripts\display_stats.php"
        Pause
        If you click our_stats.bat, it will open a command prompt window, execute your PHP script and
        display your statistics, and finally wait for the user to press a key before closing the command prompt
        window. The last step, achieved here with the pause command, is important, because the command
        prompt window will close again as soon as the batch file finishes executing, and if you have output for the
        user to view, you will want to keep it open. This can, of course, be achieved directly in your PHP script by
        pausing execution or waiting for user input, but the preceding script shows how you can mix PHP and other
        commands/programs in the same batch file. Don’t forget to change the paths to php.exe and your script as
        appropriate. You can use relative filenames or rely on default search paths, but it is often best to use the full
        path name to ensure that the correct instance of php.exe is used and avoid problems if moving your PHP
        script relative to the batch file.
        The second way of making a clickable PHP script is by calling it from within a Windows VBScript. The
        preceding example using a batch file will always open a command prompt window, even if you use php-win.
        exe rather than php.exe, as it does it by default to execute the commands in the file. A VBScript, on the other
        hand, needs no command prompt or other visual form by default. So if you want to use php-win.exe to run a
        script that either provides its own GUI interface or runs hidden in the background, you should create a script
        with a .vbs extension. Let’s say you have a PHP-GTK script (more on that in Chapter 5) called text_editor.
        php that provides a visual text editor such as Notepad. You can make it clickable by creating a file called, say,
        our_text_ed.vbs with the following contents:
        Set WinScriptHost = CreateObject("WScript.Shell")
        WinScriptHost.Run Chr(34) & "c:\Program Files (x86)\PHP\php-win.exe" &
        Chr(34) & " -e c:\Users\me\text_editor.php", 0
        Set WinScriptHost = Nothing
        Click the .vbs file, and your PHP script should spring into life, sans command-line prompt. The
        WinScriptHost.Run line does the heavy lifting of running a command that you provide. You format that
        command in the same way you would if you were typing it by hand at the command prompt, and pass it as a
        string. Note that in VBScript, & is the string concatenation operator (the same as . in PHP), and that Chr(34)
        is the” double-quote character (needed because the directory path to php-win.exe contains a space).
        Don’t forget to change the paths to the php-win.exe and your script as appropriate.
        The final piece of the puzzle, whichever of the two methods you use, is to give your clickable file a better
        icon. The files will have the default icon for batch files or VBScripts, and it is not possible to change this
        directly without changing it for all files of the same type. There are, however, two workarounds. Windows
        allows you to change the icon of a shortcut (via Right-Click ä Properties), so the first workaround is to
        hide your script file somewhere out of sight, and create a shortcut icon where you want to be able to click
        it. Then change the icon of the shortcut. The other workaround is to change the file extension to one that
        Windows does not recognize (for example, .phpsc) and create a new file extension with the same actions as
        .vbs or .bat but with a different icon.
    UBUNTU UNITY
        To add an icon to the Unity Launcher in Ubuntu, you create a .desktop file in a similar manner to the Linux
        launcher you created before, but with a few more entries in the file. So let’s create a new myscript.desktop:
        [Desktop Entry]
        Name=My Super Script
        Exec=/usr/bin/php /home/rob/scripts/myscript.php
        Icon=/usr/share/icons/Humanity/emblems/32/emblem-important.svg
        Terminal=true
        Type=Application
        StartupNotify=true
        Actions=Window;
        [Desktop Action Window]
        Name=Open me a new window please
        Exec=/usr/bin/php /home/me/scripts/myscript.php -n
        OnlyShowIn=Unity;
        Don’t forget to make it executable with chmod. This should work in its current location as with the
        previous Linux example. However, if you drag it to the Unity Launcher (or pin it while the script is running),
        it will remain there and add a new feature, the Action menu. Notice the Actions=Window line and the
        [Desktop Action Window] section in the preceding code. These define a new action (in this case, opening
        a new window, if our script had that capability via the -n flag), which is accessible by right-clicking the icon.
        Through this you can add any actions you want by, for example calling your script with different parameters,
        or even calling a completely different script (or other program) in the Exec line. If you want to automatically
        add Unity entries, or make them available to all users, I suggest the following articles.
All of the methods for starting scripts described here can be executed in any number of scenarios. You
can use them directly from a command line, as part of a shell script, as a cron job, as a system call from other
PHP (and non-PHP) scripts, as default file-type handlers, and so on. With appropriate precautions and
permissions, you can even use these methods to call scripts from web-based PHP pages (there is usually
a better and safer way to invoke them than via a web page, so I’ll leave the details of implementing and
securing it as an exercise for you if you really must do so).
