### CONFIGURATION ###
USER
	SHOW NAME
		git config user.name
	SHOW ALL
		git config --list
	CHANGE USERNAME
		git config --global user.name "Alvin J. Alexander"
	SET NAME GLOBAL
		git config --global user.name "Alvin J. Alexander"
	SET EMAIL GLOBAL
		git config --global user.email "alvin.alexander@test.at"
	SET NAME FOR SINGLE REPO
		git config user.name "Alvin J. Alexander"
	SET EMAIL FOR SINGLE REPO
		git config user.email "alvin.alexander@test.at"
REMOTE
	SHOW ALL
		git remote -v
	REMOVE
		git remote remove origin
	ADD
		SSH (prefered is via HTTPS)
			git remote add origin ssh://user@bitbucket.org/path/to/repo.git
		HTTPS (better than via SSH, you don't have to bother about SSH keys)
			git remote add origin https://bitbucket.org/user/repo

### CREATE REPO ###
INITIALISING
	git init		<-- safe: nothing will get lost if working directory is not empty
CLONING
	git clone ssh://user@server:22/~/public_html/www.sample.at/some/path/.git ./targetdirectory/
	git clone /absolute/path/to/repo-directory
	git clone https://user@bitbucket.org/username/project.git
STAGING
	git add .		<-- maybe same as: git add -A

### MOVE FILES BETWEEN AREAS ###
UNSTAGING
	SINGLE FILE
		git reset file.txt		<-- maybe same as: git rm --cached file.txt
	ALL FILES
		git reset
COMMITTING
	git commit -m "added header"		<-- commits all staged files
	git commit -a -m "bugfix in header"	<-- stages all tracked files and commits them (doesn't stage or commit untracked files)PUSHING

### BRANCHING ###
	- if you want to commit to a branch you have to switch to this branch before!!
	LIST LOCAL BRANCHES
		git branch
	NEW LOCAL BRANCH
		git checkout -b localbranchname
	SWITCH TO OTHER BRANCH
		git checkout localbranchname
	PUSH BRANCH
		git push origin localbranchname
		OTHER REMOTE BRANCH THAN ORIGIN
			git push remotebranchname localbranchname

	Update your branch when the original branch from official repository has been updated:
		git fetch [name_of_your_remote]
	Then you need to apply to merge changes, if your branch is derivated from develop you need to do:
		git merge [name_of_your_remote]/develop
	Delete a branch on your local filesystem:
		git branch -d [name_of_your_new_branch]
	To force the deletion of local branch on your filesystem:
		git branch -D [name_of_your_new_branch]
	Delete the branch on github:
		git push origin :[name_of_your_new_branch]

### WORKING WITH REMOTE ###
PUSHING
	SHOW DIFFS BEFORE PUSHING
		git diff origin/master HEAD
	FILES
		git diff --stat origin/master HEAD	<-- same as: git diff --stat --cached origin/master
	FILES WITH FULL PATH
		git diff --numstat origin/master
	VOR DEM PUSHEN DRY RUN
		git push --dry-run
	PUSH
		git push origin master
UNDO
	git fetch --all
	git reset --hard origin/master
##### HELPER COMMANDS ###
LOG
	git log			<-- list of all commits
	git log --oneline	<-- short list of all commits
