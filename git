### CONFIGURATION ###
	USER
		SHOW NAME
			git config user.name
		SHOW ALL
			git config --list
		CHANGE USERNAME
			git config --global user.name "Alvin J. Alexander"
		SET NAME GLOBAL
			git config --global user.name "Alvin J. Alexander"
		SET EMAIL GLOBAL
			git config --global user.email "alvin.alexander@test.at"
		SET NAME FOR SINGLE REPO
			git config user.name "Alvin J. Alexander"
		SET EMAIL FOR SINGLE REPO
			git config user.email "alvin.alexander@test.at"
	REMOTE
		SHOW ALL
			git remote -v
		REMOVE
			git remote remove origin	<-- removes the alias "origin"
		ADD
			INFO
				- if you clone a repo git automatically sets the default alias "origin" for your source
			SSH (prefered is via HTTPS)
				git remote add origin ssh://user@bitbucket.org/path/to/repo.git	<--sets an alias "origin"
			HTTPS (better than via SSH, you don't have to bother about SSH keys)
				git remote add origin https://bitbucket.org/user/repo		<--sets an alias "origin"
### CREATE REPO ###
	INFO
		- there are 2 ways of starting a new repo on your machine:
			- create one locally with "git init" in an empty or not empty directory (you can create an empty repo later on a server and use it as remote)
			- clone an existing repo from another machine or from a directory on the local machine
	INITIALISING
		git init		<-- safe: nothing will get lost if working directory is not empty
	CLONING
		git clone /absolute/or/relative/path/to/repo-directory target/directory
		git clone https://user@bitbucket.org/username/project.git
		git clone ssh://user@server:22/~/public_html/www.sample.at/some/path/.git ./targetdirectory/
### MOVE FILES BETWEEN AREAS ###
	MODIFIED->STAGING
		SINGLE FILE
			git add file.txt
		ALL FILES
			git add .			<-- maybe same as: git add -A
	STAGING->MODIFIED
		SINGLE FILE
			git reset file.txt		<-- maybe same as: git rm --cached file.txt
		ALL FILES
			git reset
	STAGING->COMMITTED
		git commit -m "added header"		<-- commits all staged files
	MODIFIED->COMMITTED
		git commit -a -m "bugfix in header"	<-- stages all tracked files and commits them (doesn't stage or commit untracked files)PUSHING
### BRANCHING ###
	INFOS
		- if you want to commit to a branch you have to switch to this branch before!!
		- when creating a new repo git automatically creates a branch named "master" and the user starts on this branch
		- new branches are usually created for:
			- bugfixes		<-- for quick fixes, after completion it could be merged e.g. to master
			- new features		<-- for longer development
			- test			<-- could be a branch which never gets deleted and is used for tests
			- development		<-- could be a branch which never gets deleted and is used for development
			- production		<-- usually named "master", usually a branch which never gets deleted and contains the most recent tested production code
			- releases		<-- usually there's a branch for every release, like "branchV1.0.0", "branchV1.0.1", etc.
	LIST LOCAL BRANCHES
		git branch
	CREATE LOCAL BRANCH
		git branch localbranchname		<-- create new local branch
		git checkout -b localbranchname		<-- create new local branch and switch to it
	DELETE LOCAL BRANCH
		git branch -d localbranchname		<-- delete local branch
		git branch -D localbranchname		<-- delete local branch even if changes didn't get merged
	SWITCH TO OTHER BRANCH
		git checkout localbranchname
	PUSH BRANCH
		git push origin localbranchname
		OTHER REMOTE BRANCH THAN ORIGIN
			git push remotebranchname localbranchname

	Update your branch when the original branch from official repository has been updated:
		git fetch [name_of_your_remote]
	Then you need to apply to merge changes, if your branch is derivated from develop you need to do:
		git merge [name_of_your_remote]/develop
	Delete a branch on your local filesystem:
		git branch -d [name_of_your_new_branch]
	To force the deletion of local branch on your filesystem:
		git branch -D [name_of_your_new_branch]
	Delete the branch on github:
		git push origin :[name_of_your_new_branch]
### WORKING WITH REMOTE ###
	BEFORE PUSHING
		SHOW DIFFS BEFORE PUSHING
			git diff origin/master HEAD
		FILES
			git diff --stat origin/master HEAD	<-- same as: git diff --stat --cached origin/master
		FILES WITH FULL PATH
			git diff --numstat origin/master
		VOR DEM PUSHEN DRY RUN
			git push --dry-run
	PUSH
		git push origin master			<-- same as e.g.: git push https://github.com/user/repo.git master
	UNDO
		git fetch --all
		git reset --hard origin/master
##### HELPER COMMANDS ###
	LOG
		git log			<-- list of all commits
		git log --oneline	<-- short list of all commits
	REMOVE TRACKED FILES FROM REPO (for example after you added it to .gitignore)
		git rm --cached file.txt
##############################################################################
##############################################################################
##############################################################################
git checkout 7efr684
git checkout master

git revert 7efr684

git reset 7efr684
git reset 7efr684 --hard
