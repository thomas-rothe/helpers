USER
	SHOW NAME
		git config user.name
	SHOW ALL
		git config --list
	CHANGE USERNAME
		git config --global user.name "Alvin J. Alexander"
	SET NAME GLOBAL
		git config --global user.name "Alvin J. Alexander"
	SET EMAIL GLOBAL
		git config --global user.email "alvin.alexander@test.at"
	SET NAME FOR SINGLE REPO
		git config user.name "Alvin J. Alexander"
	SET EMAIL FOR SINGLE REPO
		git config user.email "alvin.alexander@test.at"

AUSCHECKEN
	git clone ssh://medanr@www.medani.at:222/~/public_html/www.medani.at/private_plugins/medani-commons/.git ./MyDirectory/
	git clone //mwdsql01/git-repositories/medani-commons
	git clone https://mkx_medani@bitbucket.org/mkx_medani/medani-commons-wordpress.git

STAGEN
	git add .

COMMITTEN
	git commit -a -m "Blablu"

UNDO GIT ADD
	SINGLE FILE
		git reset file.txt
	ALL FILES
		git reset
REMOTE
	SHOW ALL
		git remote -v
	REMOVE
		git remote remove origin
	ADD
		SSH (nicht so gut)
			git remote add origin ssh://git@bitbucket.org/medani-web-design/medani-commons.git
		HTTPS (vielbesser, da man sich nicht um SSH keys kümmern muss)
			git remote add origin https://bitbucket.org/medani-web-design/medani-commons

PUSHEN
	VOR DEM PUSHEN DIFF ANZEIGEN:
		git diff origin/master HEAD
	FILES
		git diff --stat origin/master HEAD [ident mit: git diff --stat --cached origin/master]
	FILES MIT FULL PATH
		git diff --numstat origin/master
	VOR DEM PUSHEN DRY RUN
		git push --dry-run
	PUSH
		git push origin master

ZURÜCKSETZEN
	git fetch --all
	git reset --hard origin/master

BRANCHES
	HINWEIS
		wenn man in einen branch comitten will, muss man sich in diesem branch befinden!!
	SHOW
		git branch
	NEW LOCAL BRANCH
		git checkout -b [name_of_your_new_branch]
	SWITCH TO OTHER BRANCH
		git checkout [name_of_your_new_branch]
	PUSH BRANCH
		git push origin [name_of_your_new_branch]
		OTHER REMOTE THAN ORIGIN
			git push [name_of_your_new_remote] [name_of_your_branch]

	Update your branch when the original branch from official repository has been updated :
		git fetch [name_of_your_remote]
	Then you need to apply to merge changes, if your branch is derivated from develop you need to do :
		git merge [name_of_your_remote]/develop
	Delete a branch on your local filesystem :
		git branch -d [name_of_your_new_branch]
	To force the deletion of local branch on your filesystem :
		git branch -D [name_of_your_new_branch]
	Delete the branch on github :
		git push origin :[name_of_your_new_branch]

1. "git init" in an empty directory produces a filestructure like this:
	.git
	+branches/
	+hooks/
	--applypatch-msg.sample
		#!/bin/sh
		#
		# An example hook script to check the commit log message taken by
		# applypatch from an e-mail message.
		#
		# The hook should exit with non-zero status after issuing an
		# appropriate message if it wants to stop the commit.  The hook is
		# allowed to edit the commit message file.
		#
		# To enable this hook, rename this file to "applypatch-msg".

		. git-sh-setup
		commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
		test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
		:
	--commit-msg.sample
		#!/bin/sh
		#
		# An example hook script to check the commit log message.
		# Called by "git commit" with one argument, the name of the file
		# that has the commit message.  The hook should exit with non-zero
		# status after issuing an appropriate message if it wants to stop the
		# commit.  The hook is allowed to edit the commit message file.
		#
		# To enable this hook, rename this file to "commit-msg".
		
		# Uncomment the below to add a Signed-off-by line to the message.
		# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
		# hook is more suited to it.
		#
		# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
		# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

		# This example catches duplicate Signed-off-by lines.

		test "" = "$(grep '^Signed-off-by: ' "$1" |
			 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
			echo >&2 Duplicate Signed-off-by lines.
			exit 1
		}
	--post-update.sample
		[...]
	--pre-applypatch.sample
		[...]
	--pre-commit.sample
		[...]
	--prepare-commit-msg.sample
		[...]
	--pre-push.sample
		[...]
	--pre-rebase.sample
		[...]
	--update.sample
		[...]
	+info/
	--exclude
		# git ls-files --others --exclude-from=.git/info/exclude
		# Lines that start with '#' are comments.
		# For a project mostly in C, the following would be a good set of
		# exclude patterns (uncomment them if you want to use them):
		# *.[oa]
		# *~
	+objects/
	++info/
	++pack/
	+refs/
	++heads/
	++tags/
	-config
		[core]
			repositoryformatversion = 0
			filemode = true
			bare = false
			logallrefupdates = true
	-description
		Unnamed repository; edit this file 'description' to name the repository.
	-HEAD
		ref: refs/heads/master
2. creating empty textfile with "touch test" does not change anything in the ".git" directory
3. staging with "git add test" creates:
	- a file ".git/index"
		DIRCY�@c
			  �T�Y�@c
				 �T�������⛲��CK�)�wZ����S�test�cnXtRi�')lc�:��FΗ%
	- a directory ".git/objects/e6"
	- a file ".git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391"
		xK��OR0`	��
4. committing with: "git commit -m "initial commit""
	- edits ".git/index" to
		DIRCY�@c
			  �T�Y�@c
				 �T�������⛲��CK�)�wZ����S�testTREE1 0
		�Z�s�6�Qv���4�a�k='�p���w��1?��h���~~
	- creates a file ".git/COMMIT_EDITMSG"
		initial commit
	- creates a folder ".git/logs"
	- creates a file ".git/logs/HEAD"
		0000000000000000000000000000000000000000 7057b31146d304f4207974bf8e50d9c28878a4c5 michaelKaefer <michael.kaefer1@gmx.at> 1503347411 +0200	commit (initial): initial commit
	- creates a folder ".git/logs/refs"
	- creates a folder ".git/logs/refs/heads"
	- creates a file ".git/logs/refs/heads/master"
		0000000000000000000000000000000000000000 7057b31146d304f4207974bf8e50d9c28878a4c5 michaelKaefer <michael.kaefer1@gmx.at> 1503347411 +0200	commit (initial): initial commit
	- a directory ".git/objects/70"
	- a file ".git/objects/70/57b31146d304f4207974bf8e50d9c28878a4c5"
		x��K
			\]���LQ�0g�c��!f�����S�u���̲\X�lp��p�Ϸ�X'�`�|��p��ZS��~�
                                                           �=�6^��2o�L>�
	- a directory ".git/objects/f0"
	- a file ".git/objects/f0/5af273ba36fe5176e5eaab349661a56b3d27a0"
		x+)JMU06b040031Q(I-.ax6���M�9{wk�+��q�IO�D'�M
	- a file ".git/refs/heads/master"
		7057b31146d304f4207974bf8e50d9c28878a4c5
5. "touch test_2"
6. "git add test_2"
	- edits ".git/index" to:
		DIRCY�@c
			  �T�Y�@c
				 �T�������⛲��CK�)�wZ����S�testY�G A{�Y�G A{�������⛲��CK�)�wZ����S�test_2TREE-1 0
		�I���A�})�<X�-r���
7. "git commit -m "second commit"
	- edits ".git/COMMIT_EDITMSG" to:
		second commit
	- edits ".git/index" to:
		DIRCY�@c
			  �T�Y�@c
				 �T�������⛲��CK�)�wZ����S�testY�G A{�Y�G A{�������⛲��CK�)�wZ����S�test_2TREE2 0
		n){��?�Z�;\�����&M^מz蔼\�6�T��k�;���
	- edits ".git/logs/HEAD" to
		0000000000000000000000000000000000000000 7057b31146d304f4207974bf8e50d9c28878a4c5 michaelKaefer <michael.kaefer1@gmx.at> 1503347411 +0200	commit (initial): initial commit
		7057b31146d304f4207974bf8e50d9c28878a4c5 7a548c49d778587f9c9165a0803ae71692f02e7a michaelKaefer <michael.kaefer1@gmx.at> 1503348931 +0200	commit: second commit
	- edits ".git/logs/refs/heads/master"
		0000000000000000000000000000000000000000 7057b31146d304f4207974bf8e50d9c28878a4c5 michaelKaefer <michael.kaefer1@gmx.at> 1503347411 +0200	commit (initial): initial commit
		7057b31146d304f4207974bf8e50d9c28878a4c5 7a548c49d778587f9c9165a0803ae71692f02e7a michaelKaefer <michael.kaefer1@gmx.at> 1503348931 +0200	commit: second commit
	- a directory ".git/objects/7a"
	- a file ".git/objects/7a/548c49d778587f9c9165a0803ae71692f02e7a" 
		x��A
		�0=��
		       e��4	�x��dc�����+�x��
						   ��y��F
		�VEt/�P
			;*�Mq���$
	- a directory ".git/objects/e6"
	- a file ".git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391" 
		xK��OR0`	��
	- edits ".git/refs/heads/master"
		7a548c49d778587f9c9165a0803ae71692f02e7a
	
